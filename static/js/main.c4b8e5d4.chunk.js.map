{"version":3,"sources":["logo.svg","components/QuoteGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RandomQuote","props","getNewQuote","getQuote","state","quote","author","this","axios","get","then","res","data","randomQuote","Math","floor","random","length","setState","className","id","class","href","target","title","async","src","type","onClick","Component","App","QuoteGenerator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,8KCuE3BC,E,YAnEZ,WAAYC,GAAQ,IAAD,8BAChB,4CAAMA,KA2BTC,YAAc,WACX,EAAKC,YA3BL,EAAKC,MAAQ,CACVC,MAAO,GACPC,OAAQ,IAJK,E,iFAShBC,KAAKJ,a,iCAGI,IAAD,OAGRK,IAAMC,IAFI,+BAGNC,MAAK,SAAAC,GACH,IAAIC,EAAOD,EAAIC,KAEXC,EAAcD,EADAE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,SAGlD,EAAKC,SAAS,CACXb,MAAOQ,EAAW,KAClBP,OAAQO,EAAW,c,+BASrB,IAAD,EACoBN,KAAKH,MAAvBC,EADF,EACEA,MAAOC,EADT,EACSA,OACf,OACG,yBAAKa,UAAU,aACZ,wBAAIA,UAAU,SAAd,kBACA,yBAAKA,UAAU,WACf,yBAAKC,GAAG,aACL,yBAAKA,GAAG,QAAO,2BAAG,0BAAMD,UAAU,UAAS,uBAAGE,MAAM,uBAArC,KAAuEhB,IACtF,yBAAKe,GAAG,UAAS,gCAAMd,IACvB,yBAAKc,GAAG,WACT,4BAAQD,UAAU,YAAW,uBAAGC,GAAG,cAAeE,KAAI,gDAA2CjB,EAA3C,YAAoDC,GAAUiB,OAAO,SAASC,MAAM,gCACzI,8BACQ,uBAAGL,UAAU,mCAKnB,4BAAQA,UAAU,YAAW,uBAAGC,GAAG,eAAgBE,KAAI,+BAAkCC,OAAO,SAASC,MAAM,+BACjH,8BACA,uBAAGH,MAAM,oBAGP,4BAAQD,GAAG,YAAYK,OAAK,EAACC,IAAI,+CAGjC,4BAAQC,KAAK,SAASP,GAAG,YAAYD,UAAU,KAAKS,QAASrB,KAAKL,aAAlE,qB,GA1DQ2B,aCYXC,MARf,WACE,OACE,6BACE,kBAACC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.c4b8e5d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass RandomQuote extends Component {\r\n    constructor(props) {\r\n       super(props)\r\n       this.state = {\r\n          quote: '',\r\n          author: ''\r\n       }\r\n    }\r\n \r\n    componentDidMount() {\r\n       this.getQuote()\r\n    }\r\n \r\n    getQuote() {\r\n       let url = 'https://type.fit/api/quotes'\r\n \r\n       axios.get(url)\r\n          .then(res => {\r\n             let data = res.data\r\n             let quoteNumber = Math.floor(Math.random() * data.length) //get a random index\r\n             let randomQuote = data[quoteNumber] //the random quote\r\n \r\n             this.setState({\r\n                quote: randomQuote['text'],\r\n                author: randomQuote['author']\r\n             })\r\n          })\r\n    }\r\n \r\n    getNewQuote = () => {\r\n       this.getQuote()\r\n    }\r\n \r\n    render() {\r\n       const { quote, author } = this.state\r\n       return (\r\n          <div className=\"container\">\r\n             <h1 className='title'>Get your quote</h1>\r\n             <div className=\"wrapper\">\r\n             <div id='quote-box'>\r\n                <div id='text'><p><span className=\"qtIcon\"><i class=\"fas fa-quote-left\"></i></span>  {quote}</p></div>\r\n                <div id='author'><p>- {author}</p></div>\r\n                <div id='buttons'>\r\n               <button className=\"bt media\"><a id='tweet-quote'  href={`https://twitter.com/intent/tweet?text=${quote} ${author}`} target='_blank' title=\"Share this quote on Twitter!\">\r\n                <span>\r\n                        <i className=\"fab fa-twitter twitter-icon\" /> \r\n                     </span>\r\n                  </a>\r\n                  </button>\r\n\r\n                  <button className=\"bt media\"><a id='tumblr-quote'  href={`https://www.tumblr.com/share`} target='_blank' title=\"Share this quote on Tumblr!\">\r\n                <span>\r\n                <i class=\"fab fa-tumblr\"></i>\r\n                     </span>\r\n                  </a>\r\n                  <script id=\"tumblr-js\" async src=\"https://assets.tumblr.com/share-button.js\"></script>\r\n                  </button>\r\n\r\n                  <button type=\"button\" id='new-quote' className=\"bt\" onClick={this.getNewQuote}>New Quote</button>\r\n                \r\n                </div>\r\n             </div>\r\n             </div>\r\n          </div>\r\n       )\r\n    }\r\n }\r\n \r\n export default RandomQuote","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport QuoteGenerator from './components/QuoteGenerator';\n\n\n\nfunction App() {\n  return (\n    <div >     \n      <QuoteGenerator />    \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}